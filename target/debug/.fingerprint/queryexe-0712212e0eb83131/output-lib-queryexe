{"$message_type":"diagnostic","message":"usage of `contains_key` followed by `insert` on a `HashMap`","code":{"code":"clippy::map_entry","explanation":null},"level":"warning","spans":[{"file_name":"src/queryexe/src/opiterator/hash_join.rs","byte_start":2331,"byte_end":2748,"line_start":74,"line_end":82,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if hashmap.contains_key(&leftfield) {","highlight_start":17,"highlight_end":54},{"text":"                    // add the value to the array under that hashkey","highlight_start":1,"highlight_end":69},{"text":"                    let vec = hashmap.get_mut(&leftfield).unwrap();","highlight_start":1,"highlight_end":68},{"text":"                    vec.push(cur_tuple);","highlight_start":1,"highlight_end":41},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    // initialize a new hash key value pair","highlight_start":1,"highlight_end":60},{"text":"                    let vec = vec![cur_tuple];","highlight_start":1,"highlight_end":47},{"text":"                    hashmap.insert(leftfield, vec);","highlight_start":1,"highlight_end":52},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_entry","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::map_entry)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"try","code":null,"level":"help","spans":[{"file_name":"src/queryexe/src/opiterator/hash_join.rs","byte_start":2331,"byte_end":2748,"line_start":74,"line_end":82,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if hashmap.contains_key(&leftfield) {","highlight_start":17,"highlight_end":54},{"text":"                    // add the value to the array under that hashkey","highlight_start":1,"highlight_end":69},{"text":"                    let vec = hashmap.get_mut(&leftfield).unwrap();","highlight_start":1,"highlight_end":68},{"text":"                    vec.push(cur_tuple);","highlight_start":1,"highlight_end":41},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    // initialize a new hash key value pair","highlight_start":1,"highlight_end":60},{"text":"                    let vec = vec![cur_tuple];","highlight_start":1,"highlight_end":47},{"text":"                    hashmap.insert(leftfield, vec);","highlight_start":1,"highlight_end":52},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"if let std::collections::hash_map::Entry::Vacant(e) = hashmap.entry(leftfield) {\n                    // initialize a new hash key value pair\n                    let vec = vec![cur_tuple];\n                    e.insert(vec);\n                } else {\n                    // add the value to the array under that hashkey\n                    let vec = hashmap.get_mut(&leftfield).unwrap();\n                    vec.push(cur_tuple);\n                }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: usage of `contains_key` followed by `insert` on a `HashMap`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/queryexe/src/opiterator/hash_join.rs:74:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if hashmap.contains_key(&leftfield) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    // add the value to the array under that hashkey\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let vec = hashmap.get_mut(&leftfield).unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    vec.push(cur_tuple);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    hashmap.insert(leftfield, vec);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::map_entry)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: try\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mif let std::collections::hash_map::Entry::Vacant(e) = hashmap.entry(leftfield) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     // initialize a new hash key value pair\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     let vec = vec![cur_tuple];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     e.insert(vec);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     // add the value to the array under that hashkey\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     let vec = hashmap.get_mut(&leftfield).unwrap();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     vec.push(cur_tuple);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"1 warning emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 1 warning emitted\u001b[0m\n\n"}
